---
interface Props {
  lang: "es" | "en";
}

const props = Astro.props;

import EN from "~/locales/en.json";
import ES from "~/locales/es.json";
const header = props.lang === "es" ? ES.header : EN.header;

import { getRelativeLocaleUrl } from "astro:i18n";
import SelectLang from "~/components/select-lang.vue";
import Logo from "~/components/icon/logo.astro";

const getUrl = (locale: "en" | "es", path: string): string => {
  const _path = getRelativeLocaleUrl(locale, path);
  return _path.slice(0, _path.length - 1);
};
---

<div class="Header-container">
  <header class="Header">
    <div class="Header-icon">
      <a href={getRelativeLocaleUrl(props.lang, "/")} title={header.icon}
        ><Logo /></a
      >
    </div>
    <nav class="Header-menu">
      <menu class="Header-links">
        {
          header.links.map((item) => (
            <li>
              <a href={getUrl(props.lang, item.href)}>{item.text}</a>
            </li>
          ))
        }
      </menu>
      <div class="Header-config">
        <SelectLang lang={props.lang} client:only />
        <a href={getUrl(props.lang, "/#contact")} class="Button">
          {header.contact_me}
        </a>
      </div>
    </nav>
    <div class="Header-active-menu">
      <button type="button" aria-label={header.expanded_menu} id="expand-menu"
      ></button>
    </div>
  </header>
</div>

<script>
  const iconBars =
    '<svg viewBox="0 0 448 512" fill="#fff"><path d="M0 96c0-17.7 14.3-32 32-32h384c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32m0 160c0-17.7 14.3-32 32-32h384c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32m448 160c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32h384c17.7 0 32 14.3 32 32"/></svg>';
  const iconCross =
    '<svg viewBox="0 0 16 16"><path fill="#fff" d="M15.854 12.854 11 8l4.854-4.854a.503.503 0 0 0 0-.707L13.561.146a.5.5 0 0 0-.707 0L8 5 3.146.146a.5.5 0 0 0-.707 0L.146 2.439a.5.5 0 0 0 0 .707L5 8 .146 12.854a.5.5 0 0 0 0 .707l2.293 2.293a.5.5 0 0 0 .707 0L8 11l4.854 4.854a.5.5 0 0 0 .707 0l2.293-2.293a.5.5 0 0 0 0-.707"/></svg>';

  const headerMenu = document.getElementsByClassName("Header-menu")[0];
  const expandedMenu = document.getElementById("expand-menu");
  if (expandedMenu) {
    expandedMenu.innerHTML = iconBars;
    expandedMenu.addEventListener("click", () => {
      if (headerMenu.ariaExpanded) {
        headerMenu.removeAttribute("aria-expanded");
        expandedMenu.innerHTML = iconBars;
      } else {
        headerMenu.ariaExpanded = "true";
        expandedMenu.innerHTML = iconCross;
      }
    });
  }
</script>

<style>
  .Header-container {
    position: fixed;
    top: 0;
    left: 0;
    display: flex;
    justify-content: center;
    padding: 1.25rem 0;
    width: 100%;
    background-color: #0508109c;
    -webkit-backdrop-filter: blur(5px);
    backdrop-filter: blur(5px);
    z-index: 10000;
  }

  .Header {
    position: relative;
    background-color: #272727;
    width: calc(100% - 5rem);
    max-width: 1200px;
    padding: 0.625rem 1.25rem;
    border-radius: 1.875rem;
    display: flex;
    align-items: center;
    box-shadow: 0 1px 4px #fff;
  }

  .Header-icon,
  .Header-icon svg {
    width: 2.5rem;
    height: 2.5rem;
  }

  .Header-menu {
    display: none;
    position: absolute;
    background-color: #272727;
    flex-direction: column;
    width: calc(280px - 0.625rem * 2);
    top: 70px;
    right: 0;
    padding: 0.625rem;
    gap: 1.3rem;
    border-radius: 10px;
  }

  .Header-menu[aria-expanded="true"] {
    display: flex;
  }

  .Header-links,
  .Header-config {
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    gap: 0.5rem;
  }

  .Header-links li {
    list-style: none;
    width: max-content;
    align-self: center;
  }

  .Header-links li a {
    color: #fff;
    text-decoration: none;
    font-size: 1.2rem;
  }

  .Header-config {
    align-self: center;
  }

  .Header-active-menu {
    flex: 1;
    display: flex;
    justify-content: flex-end;
  }

  .Header-active-menu button {
    background-color: transparent;
    border: none;
  }

  .Header-active-menu button,
  .Header-active-menu button svg {
    width: 30px;
    height: 30px;
  }

  @media (min-width: 900px) {
    .Header {
      position: static;
    }

    .Header-menu {
      display: flex;
      position: static;
      width: auto;
      flex-direction: row;
      padding: 0;
      flex: 1;
    }

    .Header-links,
    .Header-config {
      flex-direction: row;
    }

    .Header-links {
      flex: 1;
    }

    .Header-config {
      gap: 1rem;
    }

    .Header-active-menu {
      flex: 0;
      display: none;
    }
  }
</style>
